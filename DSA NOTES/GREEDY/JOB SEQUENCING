Given a set of N jobs where each job i has a deadline and profit associated to it. Each job takes 1 unit of time to complete and only one job can be scheduled at a time. We earn the profit if and only if the job is completed by its deadline. The task is to find the maximum profit and the number of jobs done.

Note: Jobs will be given in the form (Job id, Deadline, Profit) associated to that Job.


Example 1:

Input:
N = 4
Jobs = (1,4,20)(2,1,10)(3,1,40)(4,1,30)
Output:
2 60
Explanation:
2 jobs can be done with
maximum profit of 60 (20+40).
Example 2:

Input:
N = 5
Jobs = (1,2,100)(2,1,19)(3,2,27)
(4,1,25)(5,1,15)
Output:
2 127
Explanation:
2 jobs can be done with
maximum profit of 127 (100+27).

Your Task :
You don't need to read input or print anything. Your task is to complete the function JobScheduling() which takes an Integer N and an array of Jobs(Job id, Deadline, Profit) as input and returns the count of jobs and maximum profit.


Expected Time Complexity: O(NlogN)
Expected Auxilliary Space: O(N)


Constraints:
1 <= N <= 105
1 <= Deadline <= 100
1 <= Profit <= 500

********************************************************************************************************************************************
BRUTE FORE:
#include<iostream>
#include<algorithm>
using namespace std;
 
struct Job
{
   char id;     // Job Id
   int dead;    // Deadline of job
   int profit;  // Profit if job is over before or on deadline
};
 
bool comparison(Job a, Job b)
{
     return (a.profit > b.profit);
}
 
void printJobScheduling(Job arr[], int n)
{
    
    sort(arr, arr+n, comparison);
 
    int result[n]; // To store result (Sequence of jobs)
    bool slot[n];  // To keep track of free time slots
 
    // Initialize all slots to be free
    for (int i=0; i<n; i++)
        slot[i] = false;
 
    // Iterate through all given jobs
    for (int i=0; i<n; i++)
    {
       // Find a free slot for this job (Note that we start
       // from the last possible slot)
       for (int j=min(n, arr[i].dead)-1; j>=0; j--)
       {
          // Free slot found
          if (slot[j]==false)
          {
             result[j] = i;  // Add this job to result
             slot[j] = true; // Make this slot occupied
             break;
          }
       }
    }
 
    // Print the result
    for (int i=0; i<n; i++)
       if (slot[i])
         cout << arr[result[i]].id << " ";
}
 
// Driver code
int main()
{
    Job arr[] = { {'a', 2, 100}, {'b', 1, 19}, {'c', 2, 27},
                   {'d', 1, 25}, {'e', 3, 15}};
    int n = sizeof(arr)/sizeof(arr[0]);
    cout << "Following is maximum profit sequence of jobs \n";
   
    // Function call
    printJobScheduling(arr, n);
    return 0;
}

TIME COMPLEXITY: O(N^2)
SPACE:o(N);

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
OPTIMISEDAPPROACH:

TIME COMPLEXITY: O(NlogN)
SPACE:O(N) 

class Solution 
{
    public:
    int find(int *parent,int u)
    {
        if(parent[u]==u)
        {
            return u;
        }
        
        return parent[u]=find(parent,parent[u]);
    }
    void merge(int *parent,int u,int v)
    {
        parent[u]=v;
    }
    static bool compare(Job &a,Job &b)
    {
    
        return a.profit>b.profit;
    }
    vector<int> JobScheduling(Job arr[], int n) 
    { 
       sort(arr,arr+n,compare);
       int maxi=INT_MIN;
       
       for(int i=0;i<n;i++)
       {
           maxi=max(maxi,arr[i].dead);
       }
       
       int slot[maxi+1];
       
       for(int i=0;i<=maxi;i++)
       {
           slot[i]=i;
       }
       
       int profit=0;
       int c=0;
       for(int i=0;i<n;i++)
       {
           int available=find(slot,arr[i].dead);
           
           if(available>0)
           {
               profit+=arr[i].profit;
               c++;
               merge(slot,available,available-1);
           }
       }
       
       vector<int>ans;
       ans.push_back(c);
       ans.push_back(profit);
        
        return ans;
    } 
};